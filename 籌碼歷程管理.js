class 籌碼管理 {
  static 歷程 = [];
  static 狀態 = {};
  static get 進度() {
    return 籌碼管理.歷程.length;
  }
  static 清空() {
    籌碼管理.歷程 = [];
    籌碼管理.狀態 = {};
  }

  /* ================================ */
  /*  與顯示有關                      */
  /* ================================ */
  static 取得本桌所有人剩餘籌碼數量() {
    let 籌碼數量 = {};
    let 下注數 = 下注管理.取得所有人各類籌碼下注數();
    let 本桌所有名字 = Object.values(查看中的桌資料.座位狀態);
    本桌所有名字.forEach(名字 => {
      籌碼數量[名字] = {};
      Object.entries(籌碼管理.狀態[名字] || {}).forEach(([類型, 數量]) => {
        籌碼數量[名字][類型] = (籌碼數量[名字][類型] || 0) + 數量;
      });
      Object.entries(下注數[名字] || {}).forEach(([類型, 數量]) => {
        籌碼數量[名字][類型] = (籌碼數量[名字][類型] || 0) - 數量;
      });
    });
    return 籌碼數量;
  }

  /* ================================ */
  /*  與動作有關                      */
  /* ================================ */
  static 取得自己的某種籌碼數量(類型) {
    if(!自己.名字) return 0;
    let 自己的籌碼 = 籌碼管理.狀態[自己.名字];
    if(!自己的籌碼) return 0;
    return 自己的籌碼[類型] || 0;
  }
  static 取得一個自己的籌碼類型() {
    if(!自己.名字) return "";
    let 自己的籌碼 = 籌碼管理.狀態[自己.名字];
    if(!自己的籌碼) return "";
    if(自己的籌碼[下注籌碼類型]) return 下注籌碼類型;
    return Object.keys(自己的籌碼)[0] || "";
  }

  /* ================================ */
  /*  與更新有關                      */
  /* ================================ */
  static 重新讀取目前資料() {
    籌碼管理.歷程 = [];
    籌碼管理.狀態 = {};
    if(!查看中的桌資料.籌碼歷程) return;
    籌碼管理.更新多條(查看中的桌資料.籌碼歷程);
    下注籌碼類型 = 籌碼管理.取得一個自己的籌碼類型();
  }
  static 更新多條(歷程arr) {
    歷程arr.forEach(一行歷程 => 籌碼管理.更新一行(一行歷程));
  }
  static 更新一行(一行歷程) {
    let {名字, 類型, 數量} = 一行歷程;
    籌碼管理.歷程.push(一行歷程);
    if(!籌碼管理.狀態[名字]) 籌碼管理.狀態[名字] = {};
    let 某人的籌碼 = 籌碼管理.狀態[名字];
    某人的籌碼[類型] = (某人的籌碼[類型] || 0) + 數量;
    if(某人的籌碼[類型] <= 0) delete 某人的籌碼[類型];
  }
}
